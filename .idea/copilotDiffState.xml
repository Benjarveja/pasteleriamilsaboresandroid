<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pasteleriamilssaboresandroid/ui/checkout/CheckoutScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pasteleriamilssaboresandroid/ui/checkout/CheckoutScreen.kt" />
              <option name="originalContent" value="package com.example.pasteleriamilssaboresandroid.ui.checkout&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.pasteleriamilssaboresandroid.ui.cart.CartViewModel&#10;import com.example.pasteleriamilssaboresandroid.util.formatCLP&#10;&#10;@Composable&#10;fun CheckoutScreen(cartVM: CartViewModel, onFinish: () -&gt; Unit) {&#10;    val ui by cartVM.ui.collectAsStateWithLifecycle()&#10;&#10;    var name by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var email by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var address by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize().padding(16.dp),&#10;        verticalArrangement = Arrangement.Top&#10;    ) {&#10;        Text(&quot;Checkout&quot;, style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold)&#10;        Spacer(Modifier.size(12.dp))&#10;&#10;        Text(&quot;Total a pagar: ${formatCLP(ui.total)}&quot;, style = MaterialTheme.typography.titleLarge, fontWeight = FontWeight.SemiBold)&#10;        Spacer(Modifier.size(16.dp))&#10;&#10;        OutlinedTextField(value = name, onValueChange = { name = it }, label = { Text(&quot;Nombre completo&quot;) }, modifier = Modifier.fillMaxWidth())&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = email, onValueChange = { email = it }, label = { Text(&quot;Email&quot;) }, modifier = Modifier.fillMaxWidth())&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = address, onValueChange = { address = it }, label = { Text(&quot;Dirección&quot;) }, modifier = Modifier.fillMaxWidth())&#10;&#10;        Spacer(Modifier.size(16.dp))&#10;        Button(&#10;            enabled = name.isNotBlank() &amp;&amp; email.isNotBlank() &amp;&amp; address.isNotBlank() &amp;&amp; ui.items.isNotEmpty(),&#10;            onClick = {&#10;                // Aquí se podría llamar a un backend; por ahora limpiamos el carrito y finalizamos&#10;                cartVM.clear()&#10;                onFinish()&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) { Text(&quot;Confirmar pedido&quot;) }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.pasteleriamilssaboresandroid.ui.checkout&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.pasteleriamilssaboresandroid.ui.cart.CartViewModel&#10;import com.example.pasteleriamilssaboresandroid.util.*&#10;&#10;@Composable&#10;fun CheckoutScreen(cartVM: CartViewModel, onFinish: () -&gt; Unit) {&#10;    val ui by cartVM.ui.collectAsStateWithLifecycle()&#10;&#10;    var firstName by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var lastName by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var run by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var email by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var phone by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var region by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var comuna by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var street by rememberSaveable { mutableStateOf(&quot;&quot;) }&#10;    var deliveryMethod by rememberSaveable { mutableStateOf(&quot;delivery&quot;) }&#10;    var paymentMethod by rememberSaveable { mutableStateOf(&quot;card&quot;) }&#10;&#10;    var errors by remember { mutableStateOf&lt;Map&lt;String, String&gt;&gt;(emptyMap()) }&#10;&#10;    fun validate(): Boolean {&#10;        val newErrors = mutableMapOf&lt;String, String&gt;()&#10;        if (!hasMinLength(firstName, 2)) newErrors[&quot;firstName&quot;] = &quot;Nombre requerido (mín. 2 caracteres)&quot;&#10;        if (!hasMinLength(lastName, 2)) newErrors[&quot;lastName&quot;] = &quot;Apellido requerido (mín. 2 caracteres)&quot;&#10;        if (!isValidRun(run)) newErrors[&quot;run&quot;] = &quot;RUN inválido&quot;&#10;        if (!isValidEmail(email)) newErrors[&quot;email&quot;] = &quot;Email inválido&quot;&#10;        if (!isValidChileanPhone(phone)) newErrors[&quot;phone&quot;] = &quot;Teléfono inválido (debe comenzar con 9 y tener 9 dígitos)&quot;&#10;        if (!hasMinLength(street, 5)) newErrors[&quot;street&quot;] = &quot;Dirección requerida (mín. 5 caracteres)&quot;&#10;        if (!hasMinLength(region, 3)) newErrors[&quot;region&quot;] = &quot;Región requerida&quot;&#10;        if (!hasMinLength(comuna, 3)) newErrors[&quot;comuna&quot;] = &quot;Comuna requerida&quot;&#10;        errors = newErrors&#10;        return newErrors.isEmpty()&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize().verticalScroll(rememberScrollState()).padding(16.dp),&#10;        verticalArrangement = Arrangement.Top&#10;    ) {&#10;        Text(&quot;Checkout&quot;, style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold)&#10;        Spacer(Modifier.size(12.dp))&#10;        Text(&quot;Total a pagar: ${formatCLP(ui.total)}&quot;, style = MaterialTheme.typography.titleLarge, fontWeight = FontWeight.SemiBold)&#10;        Spacer(Modifier.size(16.dp))&#10;&#10;        OutlinedTextField(value = firstName, onValueChange = { firstName = it }, label = { Text(&quot;Nombre&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;firstName&quot;), supportingText = { errors[&quot;firstName&quot;]?.let { Text(it) } })&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = lastName, onValueChange = { lastName = it }, label = { Text(&quot;Apellido&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;lastName&quot;), supportingText = { errors[&quot;lastName&quot;]?.let { Text(it) } })&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = run, onValueChange = { run = it }, label = { Text(&quot;RUN (ej: 12.345.678-5)&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;run&quot;), supportingText = { errors[&quot;run&quot;]?.let { Text(it) } })&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = email, onValueChange = { email = it }, label = { Text(&quot;Email&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;email&quot;), supportingText = { errors[&quot;email&quot;]?.let { Text(it) } })&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = phone, onValueChange = { phone = it }, label = { Text(&quot;Teléfono (ej: 987654321)&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;phone&quot;), supportingText = { errors[&quot;phone&quot;]?.let { Text(it) } })&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = street, onValueChange = { street = it }, label = { Text(&quot;Dirección&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;street&quot;), supportingText = { errors[&quot;street&quot;]?.let { Text(it) } })&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = comuna, onValueChange = { comuna = it }, label = { Text(&quot;Comuna&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;comuna&quot;), supportingText = { errors[&quot;comuna&quot;]?.let { Text(it) } })&#10;        Spacer(Modifier.size(8.dp))&#10;        OutlinedTextField(value = region, onValueChange = { region = it }, label = { Text(&quot;Región&quot;) }, modifier = Modifier.fillMaxWidth(),&#10;            isError = errors.containsKey(&quot;region&quot;), supportingText = { errors[&quot;region&quot;]?.let { Text(it) } })&#10;&#10;        Spacer(Modifier.size(16.dp))&#10;        Text(&quot;Método de entrega&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(Modifier.size(8.dp))&#10;        Row(Modifier.fillMaxWidth()) {&#10;            FilterChip(selected = deliveryMethod == &quot;delivery&quot;, onClick = { deliveryMethod = &quot;delivery&quot; }, label = { Text(&quot;Envío a domicilio&quot;) }, modifier = Modifier.weight(1f))&#10;            Spacer(Modifier.size(8.dp))&#10;            FilterChip(selected = deliveryMethod == &quot;pickup&quot;, onClick = { deliveryMethod = &quot;pickup&quot; }, label = { Text(&quot;Retiro en tienda&quot;) }, modifier = Modifier.weight(1f))&#10;        }&#10;&#10;        Spacer(Modifier.size(16.dp))&#10;        Text(&quot;Método de pago&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(Modifier.size(8.dp))&#10;        Row(Modifier.fillMaxWidth()) {&#10;            FilterChip(selected = paymentMethod == &quot;card&quot;, onClick = { paymentMethod = &quot;card&quot; }, label = { Text(&quot;Tarjeta&quot;) }, modifier = Modifier.weight(1f))&#10;            Spacer(Modifier.size(8.dp))&#10;            FilterChip(selected = paymentMethod == &quot;transfer&quot;, onClick = { paymentMethod = &quot;transfer&quot; }, label = { Text(&quot;Transferencia&quot;) }, modifier = Modifier.weight(1f))&#10;        }&#10;&#10;        Spacer(Modifier.size(16.dp))&#10;        Button(&#10;            enabled = ui.items.isNotEmpty(),&#10;            onClick = {&#10;                if (validate()) {&#10;                    cartVM.clear()&#10;                    onFinish()&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) { Text(&quot;Confirmar pedido&quot;) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>